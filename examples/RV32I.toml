set = "RV32I"
width = 32

[types]
names = [
    "reg",
    "imm",
    "load",
    "store",
    "shift",
    "branch",
    "jump",
    "upper",
    "fence"
]
parts = [
    [
        "opcode",
        7,
        "u8",
    ],
    [
        "funct3",
        3,
        "u8",
    ],
    [
        "funct7",
        7,
        "u8",
    ],
    [
        "rd",
        5,
        "Register_int",
    ],
    [
        "rs1",
        5,
        "Register_int",
    ],
    [
        "rs2",
        5,
        "Register_int",
    ],
    [
        "shamt",
        5,
        "u8"
    ],
    [
        "imm",
        32,
        "VInt",
    ],
    [
        "pred",
        4,
        "Register_fence"
    ],
    [
        "succ",
        4,
        "Register_fence"
    ],
    [
        "discard",
        32,
        "VInt"
    ]
]

[type]
names = ["R", "I", "I_shift", "S", "B", "U", "J", "Fence"]
R = [
    { name = "funct7", top = 6, bot = 0 },
    { name = "rs2", top = 4, bot = 0 },
    { name = "rs1", top = 4, bot = 0 },
    { name = "funct3", top = 2, bot = 0 },
    { name = "rd", top = 4, bot = 0 },
    { name = "opcode", top = 6, bot = 0 },
]
I = [
    { name = "imm", top = 11, bot = 0 },
    { name = "rs1", top = 4, bot = 0 },
    { name = "funct3", top = 2, bot = 0 },
    { name = "rd", top = 4, bot = 0 },
    { name = "opcode", top = 6, bot = 0 },
]
I_shift = [
    { name = "funct7", top = 6, bot = 0 },
    { name = "shamt", top = 4, bot = 0 },
    { name = "rs1", top = 4, bot = 0 },
    { name = "funct3", top = 2, bot = 0 },
    { name = "rd", top = 4, bot = 0 },
    { name = "opcode", top = 6, bot = 0 },
]
S = [
    { name = "imm", top = 11, bot = 5 },
    { name = "rs2", top = 4, bot = 0 },
    { name = "rs1", top = 4, bot = 0 },
    { name = "funct3", top = 2, bot = 0 },
    { name = "imm", top = 4, bot = 0 },
    { name = "opcode", top = 6, bot = 0 },
]
B = [
    { name = "imm", top = 12, bot = 12 },
    { name = "imm", top = 10, bot = 5 },
    { name = "rs2", top = 4, bot = 0 },
    { name = "rs1", top = 4, bot = 0 },
    { name = "funct3", top = 2, bot = 0 },
    { name = "imm", top = 4, bot = 1 },
    { name = "imm", top = 11, bot = 11 },
    { name = "opcode", top = 6, bot = 0 },
]
# U Different from risc-v spec, since for ASM representation, you would use it as imm[19:0] rather than imm[31:12]
U = [
    { name = "imm", top = 19, bot = 0 },
    { name = "rd", top = 4, bot = 0 },
    { name = "opcode", top = 6, bot = 0 },
]
J = [
    { name = "imm", top = 20, bot = 20 },
    { name = "imm", top = 10, bot = 1 },
    { name = "imm", top = 11, bot = 11 },
    { name = "imm", top = 19, bot = 12 },
    { name = "rd", top = 4, bot = 0 },
    { name = "opcode", top = 6, bot = 0 },
]
Fence = [
    { name = "discard", top = 3, bot = 0 },
    { name = "pred", top = 3, bot = 0 },
    { name = "succ", top = 3, bot = 0 },
    { name = "rs1", top = 4, bot = 0 },
    { name = "funct3", top = 2, bot = 0 },
    { name = "rd", top = 4, bot = 0 },
    { name = "opcode", top = 6, bot = 0 },
]

[reg]
type = "R"
[reg.repr]
default = "$name$ %rd%, %rs1%, %rs2%"
[reg.instructions]
add = { mask = 0xfe00707f, match = 0x33 }
sub = { mask = 0xfe00707f, match = 0x40000033 }
xor = { mask = 0xfe00707f, match = 0x4033 }
or = { mask = 0xfe00707f, match = 0x6033 }
and = { mask = 0xfe00707f, match = 0x7033 }
sll = { mask = 0xfe00707f, match = 0x1033 }
srl = { mask = 0xfe00707f, match = 0x5033 }
sra = { mask = 0xfe00707f, match = 0x40005033 }
slt = { mask = 0xfe00707f, match = 0x2033 }
sltu = { mask = 0xfe00707f, match = 0x3033 }


[imm]
type = "I"
[imm.repr]
default = "$name$ %rd%, %rs1%, %imm%"
jalr = "$name$ %rd%, %imm%(%rs1%)"
slti = "$name$ %rd%, %rs1%, %imm%"
sltiu = "$name$ %rd%, %rs1%, %imm%"
ecall = "$name$"
ebreak = "$name$"
[imm.instructions]
addi = { mask = 0x707f, match = 0x13 }
xori = { mask = 0x707f, match = 0x4013 }
ori = { mask = 0x707f, match = 0x6013 }
andi = { mask = 0x707f, match = 0x7013 }
jalr = { mask = 0x707f, match = 0x67 }
slti = { mask = 0x707f, match = 0x2013 }
sltiu = { mask = 0x707f, match = 0x3013 }
ecall = { mask = 0xffffffff, match = 0x73 }
ebreak = { mask = 0xffffffff, match = 0x100073 }

[shift]
type = "I_shift"
[shift.repr]
default = "$name$ %rd%, %rs1%, %shamt%"
[shift.instructions]
slli = { mask = 0xfe00707f, match = 0x1013}
srai = { mask = 0xfe00707f, match = 0x40005013}
srli = { mask = 0xfe00707f, match = 0x5013}

[load]
type = "I"
[load.repr]
default = "$name$ %rd%, %imm%(%rs1%)"
[load.instructions]
lb = { mask = 0x707f, match = 0x3 }
lh = { mask = 0x707f, match = 0x1003 }
lw = { mask = 0x707f, match = 0x2003 }
lbu = { mask = 0x707f, match = 0x4003 }
lhu = { mask = 0x707f, match = 0x5003 }

[store]
type = "S"
[store.repr]
default = "$name$ %rs2%, %imm%(%rs1%)"
[store.instructions]
sb = { mask = 0x707f, match = 0x23 }
sh = { mask = 0x707f, match = 0x1023 }
sw = { mask = 0x707f, match = 0x2023 }

[branch]
type = "B"
[branch.repr]
default = "$name$ %rs1%, %rs2%, %imm%"
[branch.instructions]
beq = { mask = 0x707f, match = 0x63 }
bne = { mask = 0x707f, match = 0x1063 }
blt = { mask = 0x707f, match = 0x4063 }
bge = { mask = 0x707f, match = 0x5063 }
bltu = { mask = 0x707f, match = 0x6063 }
bgeu = { mask = 0x707f, match = 0x7063 }

[jump]
type = "J"
[jump.repr]
default = "$name$ %rd%, %imm%"
[jump.instructions]
jal = { mask = 0x7f, match = 0x6f }

[upper]
type = "U"
[upper.repr]
default = "$name$ %rd%, %imm%"
[upper.instructions]
lui = { mask = 0x7f, match = 0x37, unsigned = true }
auipc = { mask = 0x7f, match = 0x17, unsigned = true  }

[fence]
type = "Fence"
[fence.repr]
default = "fence %pred%, %succ%"
[fence.instructions]
fence = { mask = 0x707f, match = 0xf}

[register]
names = ["Register_int", "Register_fence"]
number = 32
Register_int = [
    "zero",
    "ra",
    "sp",
    "gp",
    "tp",
    "t0",
    "t1",
    "t2",
    "s0",
    "s1",
    "a0",
    "a1",
    "a2",
    "a3",
    "a4",
    "a5",
    "a6",
    "a7",
    "s2",
    "s3",
    "s4",
    "s5",
    "s6",
    "s7",
    "s8",
    "s9",
    "s10",
    "s11",
    "t3",
    "t4",
    "t5",
    "t6",
]

[register.Register_fence]
0b0000 = "-"
0b0001 = "w"
0b0010 = "r"
0b0011 = "rw"
0b0100 = "o"
0b0101 = "ow"
0b0110 = "or"
0b0111 = "orw"
0b1000 = "i"
0b1001 = "iw"
0b1010 = "ir"
0b1011 = "irw"
0b1100 = "io"
0b1101 = "iow"
0b1110 = "ior"
0b1111 = "iorw"
